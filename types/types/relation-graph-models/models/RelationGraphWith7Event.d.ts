import { CreatingLinePlotOptions, CreatingNodePlotOptions, RGJunctionPoint, RGLine, RGLineShape, RGLineTarget, RGLink, RGListeners, RGNode, RGOnCreateLineCallback, RGOptions, RGPosition, RGSelectionView, RGUserEvent } from '../types';
import { RelationGraphWith6Effect } from './RelationGraphWith6Effect';
export declare class RelationGraphWith7Event extends RelationGraphWith6Effect {
    constructor(options: RGOptions, listeners: RGListeners);
    setDefaultLineShape(optionValue: RGLineShape): void;
    setDefaultJunctionPoint(optionValue: RGJunctionPoint): void;
    setCheckedNode(nodeId: string): void;
    setCheckedLinkAndLine(link: RGLink, line: RGLine): void;
    clearChecked(): void;
    selectNode(node: RGNode, selected: boolean): void;
    flashNode(node: RGNode, selected: boolean): void;
    updateNodeOffsetSize(node: RGNode, nodeOffsetWidth: number, nodeOffsetHeight: number): void;
    prevClickTime: number;
    onNodeClick(node: RGNode, e: RGUserEvent): Promise<void>;
    onNodeDragStart(node: RGNode, e: RGUserEvent): void;
    onNodeDraged(node: RGNode, x_buff: number, y_buff: number, e: RGUserEvent): void;
    onNodeDragEnd(node: RGNode, e: RGUserEvent, x_buff: number, y_buff: number): void;
    onLineClick(line: RGLine, link: RGLink, e: RGUserEvent): Promise<void>;
    expandOrCollapseNode(node: RGNode, e: RGUserEvent): Promise<void>;
    setChildsFromPosition(node: RGNode, pnode: RGNode): void;
    expandNode(node: RGNode, e: RGUserEvent): Promise<void>;
    getDescendantNodes(node: RGNode): RGNode[];
    setChildsToPosition(node: RGNode, pnode: RGNode): void;
    collapseNode(node: RGNode, e: RGUserEvent): Promise<void>;
    onCanvasDragEnd(e: RGUserEvent): void;
    onCanvasClick(e: RGUserEvent): void;
    clickGraphMask(e: RGUserEvent): void;
    onCanvasSelectionEnd(selectionView: RGSelectionView, e: RGUserEvent): void;
    startCreatingNodePlot(e: RGUserEvent, setting: CreatingNodePlotOptions): void;
    startCreatingLinePlot(e: RGUserEvent, setting: CreatingLinePlotOptions): void;
    movingListener: any;
    stopCreatingLinePlot(): void;
    _currentMovingLinePoint: RGLineTarget | null;
    onMovingWhenCreatingLinePlot($event: MouseEvent): void;
    onCanvasClickWhenCreatingLinePlot($event: RGUserEvent): void;
    step1EventTime: number;
    onNodeClickWhenCreatingLinePlot(node: RGNode): void;
    onCreateLineCallback: RGOnCreateLineCallback | undefined;
    onCreateLine(from: RGNode, to: RGNode | RGPosition): void;
    isNode(el: HTMLElement): RGNode | undefined;
    isLink(el: HTMLElement): RGLink | undefined;
    onContextmenu(e: RGUserEvent): void;
    fullscreen(newValue?: boolean): Promise<void>;
    focusNodeById(nodeId: string): Promise<void>;
    focusRootNode(): Promise<void>;
    handleSelect(thisNode: RGNode): Promise<void>;
    private _wheelAction;
    private _wheelBuff;
    onMouseWheel(e: WheelEvent): boolean;
    private _onMouseWheel;
    onLineDragStart(link: RGLink, e: RGUserEvent): void;
    onLineDragEnd(x_buff: number, y_buff: number, e: RGUserEvent): void;
    onCanvasDragStart(e: RGUserEvent): void;
    protected onCanvasDragging(newX: number, newY: number, buffX: number, buffY: number): void;
    onCanvasDragStop(x_buff: number, y_buff: number, e: RGUserEvent): void;
    startCreateSelection(e: RGUserEvent): void;
}
