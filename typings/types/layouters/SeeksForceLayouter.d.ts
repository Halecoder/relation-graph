import SeeksBaseLayouter from './SeeksBaseLayouter';
import { RGForceLayoutOptions, RGLayoutOptions, RGLink, RGNode, RGOptionsFull } from '../types';
export declare class SeeksForceLayouter extends SeeksBaseLayouter {
    layoutOptions: RGForceLayoutOptions;
    fastStart: boolean;
    maxLayoutTimes: number;
    byNode: boolean;
    byLine: boolean;
    force_node_repulsion: number;
    force_line_elastic: number;
    justLayoutSingleNode: boolean;
    allLinks: RGLink[];
    constructor(layoutOptions: RGLayoutOptions, graphOptions: RGOptionsFull);
    refresh(): void;
    placeNodes(allNodes: RGNode[], rootNode?: RGNode): void;
    easyPlaceGroupNodes(rootNode: RGNode): RGNode[];
    easyAnalysisNodes(rootNode: RGNode): RGNode[];
    easyPlaceRelativePosition(rootNode: RGNode, groupNodes: RGNode[]): void;
    layoutTimes: number;
    prev10: number[];
    visibleNodes: RGNode[];
    updateVisibleNodes(allNode?: RGNode[]): void;
    setLinks(links: RGLink[]): void;
    viewUpdate: (() => void) | undefined | false;
    autoLayout(forceLayout?: boolean, viewUpdate?: (() => void) | false): void;
    private doLayout;
    stop(): void;
    getX(node: RGNode): number;
    getY(node: RGNode): number;
    addElasticByLine(node1: RGNode, node2: RGNode, force_elastic?: number): void;
    addGravityByNode(node1: RGNode, node2: RGNode): void;
    addFtoNode(node: RGNode, x: number, y: number): void;
    applyToNodePosition(node: RGNode): void;
}
export default SeeksForceLayouter;
